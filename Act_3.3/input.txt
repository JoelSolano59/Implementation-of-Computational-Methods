"auto"	                fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"const"	                fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"extern"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"register"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"short"	                fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"signed"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"static"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"struct"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"typedef"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"union"	                fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"unsigned"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"volatile"	            fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);
"#include"              fprintf(yyout, "palabra_reservada\t");fprintf(yyout, "%s\n", yytext);

"char"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"int"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"long"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"long long"             fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"float"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"bool"                  fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"double"	            fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"void"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);
"enum"	                fprintf(yyout, "tipo_variable\t");fprintf(yyout, "%s\n", yytext);

"true"                  fprintf(yyout, "estado\t");fprintf(yyout, "%s\n", yytext);
"false"                 fprintf(yyout, "estado\t");fprintf(yyout, "%s\n", yytext);

"do"	                fprintf(yyout, "bucle\t");fprintf(yyout, "%s\n", yytext);
"while"	                fprintf(yyout, "bucle\t");fprintf(yyout, "%s\n", yytext);
"for"	                fprintf(yyout, "bucle\t");fprintf(yyout, "%s\n", yytext);

"case"	                fprintf(yyout, "etiqueta\t");fprintf(yyout, "%s\n", yytext);
"default"	            fprintf(yyout, "etiqueta\t");fprintf(yyout, "%s\n", yytext);

"break"	                fprintf(yyout, "salto\t");fprintf(yyout, "%s\n", yytext);
"continue"	            fprintf(yyout, "salto\t");fprintf(yyout, "%s\n", yytext);
"goto"	                fprintf(yyout, "salto\t");fprintf(yyout, "%s\n", yytext);
"return"	            fprintf(yyout, "salto\t");fprintf(yyout, "%s\n", yytext);

"if"	                fprintf(yyout, "seleccion\t");fprintf(yyout, "%s\n", yytext);
"else"	                fprintf(yyout, "seleccion\t");fprintf(yyout, "%s\n", yytext);
"switch"	            fprintf(yyout, "seleccion\t");fprintf(yyout, "%s\n", yytext);

\/\/.*                  fprintf(yyout, "comentario\t");fprintf(yyout, "%s\n", yytext);

\;                      fprintf(yyout, "nula\t");fprintf(yyout, "%s\n", yytext);

\{                      fprintf(yyout, "bloque\t");fprintf(yyout, "%s\n", yytext);
\}                      fprintf(yyout, "bloque\t");fprintf(yyout, "%s\n", yytext);

\(                      fprintf(yyout, "funcion\t");fprintf(yyout, "%s\n", yytext);
\)                      fprintf(yyout, "funcion\t");fprintf(yyout, "%s\n", yytext);

\[                      fprintf(yyout, "elemento_vector\t");fprintf(yyout, "%s\n", yytext);
\]                      fprintf(yyout, "elemento_vector\t");fprintf(yyout, "%s\n", yytext);

"cout"                  fprintf(yyout, "estandar\t");fprintf(yyout, "%s\n", yytext);
"cin"                   fprintf(yyout, "estandar\t");fprintf(yyout, "%s\n", yytext);

\+                      fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\-                      fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\*                      fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\/                      fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\%                      fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\+[^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\+\+[^\s][a-zA-Z_0-9]*  fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
[a-zA-Z_0-9]*[^\s]\+\+  fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\-[^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
\-\-[^\s][a-zA-Z_0-9]*  fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);
[a-zA-Z_0-9]*[^\s]\-\-  fprintf(yyout, "operador_aritmetico\t");fprintf(yyout, "%s\n", yytext);

\<                      fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);
\>                      fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);
\<\=                    fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);
\>\=                    fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);
\=\=                    fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);
\!\=                    fprintf(yyout, "operador_comparacion\t");fprintf(yyout, "%s\n", yytext);

\![^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador_logico\t");fprintf(yyout, "%s\n", yytext);
\&\&                    fprintf(yyout, "operador_logico\t");fprintf(yyout, "%s\n", yytext);
\|\|                    fprintf(yyout, "operador_logico\t");fprintf(yyout, "%s\n", yytext);

\<\<                    fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);
\>\>                    fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);
\~[^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);
\&                      fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);
\|                      fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);
\^                      fprintf(yyout, "operador_bit\t");fprintf(yyout, "%s\n", yytext);

\-\>                    fprintf(yyout, "operador_puntero\t");fprintf(yyout, "%s\n", yytext);
\-\>\*                  fprintf(yyout, "operador_puntero\t");fprintf(yyout, "%s\n", yytext);
\.\*                    fprintf(yyout, "operador_puntero\t");fprintf(yyout, "%s\n", yytext);

\=                      fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\+\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\-\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\*\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\/\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\%\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\<\<\=                  fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\>\>\=                  fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\&\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\^\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);
\|\=                    fprintf(yyout, "asignacion\t");fprintf(yyout, "%s\n", yytext);

\*[^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
\&[^\s][a-zA-Z_0-9]*    fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
"sizeof"                fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
"new"                   fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
"delete"                fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
"throw"                 fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
\:\:                    fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
\.                      fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);
\,                      fprintf(yyout, "operador\t");fprintf(yyout, "%s\n", yytext);

^[^_0-9][a-zA-Z_0-9]*       fprintf(yyout, "variable\t");fprintf(yyout, "%s\n", yytext);
[0-9]*                      fprintf(yyout, "entero\t");fprintf(yyout, "%s\n", yytext);
[0-9]*[^\s]\.[^\s][0-9]*    fprintf(yyout, "decimal\t");fprintf(yyout, "%s\n", yytext);

[ \t\n]                 ;
.                       fprintf(yyout, "error\t");fprintf(yyout, "%s\n", yytext);